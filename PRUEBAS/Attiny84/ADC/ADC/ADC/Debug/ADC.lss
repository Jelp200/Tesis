
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000511  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000479  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f7  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	0b d0       	rcall	.+22     	; 0x46 <main>
  30:	24 c0       	rjmp	.+72     	; 0x7a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <pin_Setup>:
#include <avr/io.h>

//* FUNCIONES
void pin_Setup() {
    //* Configuracion pin salida
	DDRA |= (1 << DDA0);					    // PA0 como salida
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	81 60       	ori	r24, 0x01	; 1
  38:	8a bb       	out	0x1a, r24	; 26
  3a:	08 95       	ret

0000003c <ADC_Setup>:
}

void ADC_Setup() {
    //* Configuracion del registro de ADC de seleccion de multiplexor
    ADMUX = 0b00000001;                         // Vcc como referencia, ADC1 como canal de entrada
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	87 b9       	out	0x07, r24	; 7

    //* Configuracion del regitro A de control y status del ADC
    ADCSRA = 0b10000011;                        // ADC habilitado, con prescaler igual a 8 (125kHz)
  40:	83 e8       	ldi	r24, 0x83	; 131
  42:	86 b9       	out	0x06, r24	; 6
  44:	08 95       	ret

00000046 <main>:
}

int main(void) {
    pin_Setup();
  46:	f6 df       	rcall	.-20     	; 0x34 <pin_Setup>
    ADC_Setup();
  48:	f9 df       	rcall	.-14     	; 0x3c <ADC_Setup>

    while (1) {
        //* Inicia una nueva conversion
        ADCSRA |= (1 << ADSC);
  4a:	86 b1       	in	r24, 0x06	; 6
  4c:	80 64       	ori	r24, 0x40	; 64
  4e:	86 b9       	out	0x06, r24	; 6

        //* Espera a que termine la conversion
        while (ADCSRA & (1 << ADSC));           // Espera a que ADSC se limpie (conversion completa)
  50:	36 99       	sbic	0x06, 6	; 6
  52:	fe cf       	rjmp	.-4      	; 0x50 <main+0xa>


        //* Lee el valor del ADC (10 bits combinando ADCH y ADCL)
        int ADC_Low = ADCL;                     // Lee primero ADCL (8 bits bajos)
  54:	24 b1       	in	r18, 0x04	; 4
        int ADC_Val = (ADCH << 8) | ADC_Low;    // Combina ADCH y ADCL en un valor de 10 bits
  56:	85 b1       	in	r24, 0x05	; 5
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	98 2f       	mov	r25, r24
  5c:	88 27       	eor	r24, r24
  5e:	82 2b       	or	r24, r18

        // Si el valor del ADC esta dentro del rango deseado, enciende el LED
        if (ADC_Val >= 410 && ADC_Val <= 1000) { // Prende si el valor del ADC es (2V, ~5V)
  60:	8a 59       	subi	r24, 0x9A	; 154
  62:	91 40       	sbci	r25, 0x01	; 1
  64:	8f 34       	cpi	r24, 0x4F	; 79
  66:	92 40       	sbci	r25, 0x02	; 2
  68:	20 f4       	brcc	.+8      	; 0x72 <main+0x2c>
            PORTA |= (1 << PORTA0);  // Enciende el LED
  6a:	8b b3       	in	r24, 0x1b	; 27
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	8b bb       	out	0x1b, r24	; 27
  70:	ec cf       	rjmp	.-40     	; 0x4a <main+0x4>
        } else {
            PORTA &= ~(1 << PORTA0);  // Apaga el LED
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	8b bb       	out	0x1b, r24	; 27
  78:	e8 cf       	rjmp	.-48     	; 0x4a <main+0x4>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
