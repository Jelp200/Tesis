
ledBlinkC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000564  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d0  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000235  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	1d c0       	rjmp	.+58     	; 0x6c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:


int main(void)
{
	//* Pin PA0 como salida
	DDRA |= (1 << DDA0);
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	81 60       	ori	r24, 0x01	; 1
  38:	8a bb       	out	0x1a, r24	; 26
	
    /* Replace with your application code */
    while (1) 
    {
		PORTA |= (1 << PORTA0);				// Pin alto (LED encendido)
  3a:	8b b3       	in	r24, 0x1b	; 27
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	8d e0       	ldi	r24, 0x0D	; 13
  44:	93 e0       	ldi	r25, 0x03	; 3
  46:	21 50       	subi	r18, 0x01	; 1
  48:	80 40       	sbci	r24, 0x00	; 0
  4a:	90 40       	sbci	r25, 0x00	; 0
  4c:	e1 f7       	brne	.-8      	; 0x46 <__SREG__+0x7>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
  50:	00 00       	nop
		_delay_ms(1000);					// 1s delay
		PORTA &= ~(1 << PORTA0);			// Pin bajo (LED apagado)
  52:	8b b3       	in	r24, 0x1b	; 27
  54:	8e 7f       	andi	r24, 0xFE	; 254
  56:	8b bb       	out	0x1b, r24	; 27
  58:	2f e3       	ldi	r18, 0x3F	; 63
  5a:	8d e0       	ldi	r24, 0x0D	; 13
  5c:	93 e0       	ldi	r25, 0x03	; 3
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	80 40       	sbci	r24, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
  6a:	e7 cf       	rjmp	.-50     	; 0x3a <main+0x6>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
