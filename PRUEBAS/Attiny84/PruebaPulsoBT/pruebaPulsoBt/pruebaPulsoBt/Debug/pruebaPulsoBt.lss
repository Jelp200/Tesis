
pruebaPulsoBt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d8  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000456  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e4  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	26 c0       	rjmp	.+76     	; 0x7e <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <avr/interrupt.h>
#include <stdio.h>

int main(void) {	
	//* Configuración de pines de salida
    DDRA |= (1 << DDA0);                        // PA0 como salida (LED infrarrojo)
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	81 60       	ori	r24, 0x01	; 1
  38:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1 << DDA3);                        // PA3 como salida
  3a:	8a b3       	in	r24, 0x1a	; 26
  3c:	88 60       	ori	r24, 0x08	; 8
  3e:	8a bb       	out	0x1a, r24	; 26

    //* Configuración del ADC
    ADMUX = 0b00000010;                         // ADC2 como entrada (con referencia Vcc)
  40:	82 e0       	ldi	r24, 0x02	; 2
  42:	87 b9       	out	0x07, r24	; 7
    ADCSRA = 0b10000011;                        // ADC habilitado, prescaler 8 (125kHz)
  44:	83 e8       	ldi	r24, 0x83	; 131
  46:	86 b9       	out	0x06, r24	; 6
	
    /* Replace with your application code */
    while (1) {	
		 //* Inicia una nueva conversion
        ADCSRA |= (1 << ADSC);
  48:	86 b1       	in	r24, 0x06	; 6
  4a:	80 64       	ori	r24, 0x40	; 64
  4c:	86 b9       	out	0x06, r24	; 6

        //* Espera a que termine la conversion
        while (ADCSRA & (1 << ADSC));           // Espera a que ADSC se limpie (conversion completa)
  4e:	36 99       	sbic	0x06, 6	; 6
  50:	fe cf       	rjmp	.-4      	; 0x4e <__SREG__+0xf>

        //* Lee el valor del ADC (10 bits combinando ADCH y ADCL)
        int ADC_Low = ADCL;                     // Lee primero ADCL (8 bits bajos)
  52:	24 b1       	in	r18, 0x04	; 4
        int ADC_Val = (ADCH << 8) | ADC_Low;    // Combina ADCH y ADCL en un valor de 10 bits
  54:	85 b1       	in	r24, 0x05	; 5
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	98 2f       	mov	r25, r24
  5a:	88 27       	eor	r24, r24
  5c:	82 2b       	or	r24, r18
		
		PORTA |= (1 << PORTA0);
  5e:	2b b3       	in	r18, 0x1b	; 27
  60:	21 60       	ori	r18, 0x01	; 1
  62:	2b bb       	out	0x1b, r18	; 27
		
		// Si el valor del ADC esta dentro del rango deseado, enciende el LED
		if (ADC_Val >= 410 && ADC_Val <= 1000) { // Prende si el valor del ADC es (2V, ~5V)
  64:	8a 59       	subi	r24, 0x9A	; 154
  66:	91 40       	sbci	r25, 0x01	; 1
  68:	8f 34       	cpi	r24, 0x4F	; 79
  6a:	92 40       	sbci	r25, 0x02	; 2
  6c:	20 f4       	brcc	.+8      	; 0x76 <__SREG__+0x37>
			PORTA |= (1 << PORTA3);  // Enciende el LED
  6e:	8b b3       	in	r24, 0x1b	; 27
  70:	88 60       	ori	r24, 0x08	; 8
  72:	8b bb       	out	0x1b, r24	; 27
  74:	e9 cf       	rjmp	.-46     	; 0x48 <__SREG__+0x9>
		} else {
		PORTA &= ~(1 << PORTA3);  // Apaga el LED
  76:	8b b3       	in	r24, 0x1b	; 27
  78:	87 7f       	andi	r24, 0xF7	; 247
  7a:	8b bb       	out	0x1b, r24	; 27
  7c:	e5 cf       	rjmp	.-54     	; 0x48 <__SREG__+0x9>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
