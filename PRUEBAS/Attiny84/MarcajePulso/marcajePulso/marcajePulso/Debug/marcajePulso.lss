
marcajePulso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d0  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000454  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f0  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fe  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	2c c0       	rjmp	.+88     	; 0x8a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <util/delay.h>

//* FUNCION PRINCIPAL
int main(){
    //* Configuracion de pines de salida
    DDRA |= (1 << DDA0);                            // PA0 como salida
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	81 60       	ori	r24, 0x01	; 1
  38:	8a bb       	out	0x1a, r24	; 26
    DDRA |= (1 << DDA1);                            // PA1 como salida
  3a:	8a b3       	in	r24, 0x1a	; 26
  3c:	82 60       	ori	r24, 0x02	; 2
  3e:	8a bb       	out	0x1a, r24	; 26
    DDRA |= (1 << DDA2);                            // PA2 como salida
  40:	8a b3       	in	r24, 0x1a	; 26
  42:	84 60       	ori	r24, 0x04	; 4
  44:	8a bb       	out	0x1a, r24	; 26

    //* Configuracion del ADC
    // Configuracion del registro de ADC de seleccion de multiplexor
    ADMUX = 0b00000011;                             // Vcc como referencia, ADC3 como canal de entrada
  46:	83 e0       	ldi	r24, 0x03	; 3
  48:	87 b9       	out	0x07, r24	; 7

    // Configuracion del regitro A de control y status del ADC
    ADCSRA = 0b10000011;                            // ADC habilitado, con prescaler igual a 8 (125kHz)
  4a:	83 e8       	ldi	r24, 0x83	; 131
  4c:	86 b9       	out	0x06, r24	; 6

    while(1){
        //* LED's de marcaje del pulso
        PORTA |= (1 << PORTA0);                     // Pin 0 alto (LED Siempre Encendio)
  4e:	8b b3       	in	r24, 0x1b	; 27
  50:	81 60       	ori	r24, 0x01	; 1
  52:	8b bb       	out	0x1b, r24	; 27
        PORTA |= (1 << PORTA1);						// Pin 1 alto (LED Siempre Encendio)
  54:	8b b3       	in	r24, 0x1b	; 27
  56:	82 60       	ori	r24, 0x02	; 2
  58:	8b bb       	out	0x1b, r24	; 27

        //* Inicia una nueva conversion
        ADCSRA |= (1 << ADSC);
  5a:	86 b1       	in	r24, 0x06	; 6
  5c:	80 64       	ori	r24, 0x40	; 64
  5e:	86 b9       	out	0x06, r24	; 6

        //* Espera a que termine la conversion
        while(ADCSRA & (1 << ADSC));                // Espera a que ADSC se limpie (conversion completa)
  60:	36 99       	sbic	0x06, 6	; 6
  62:	fe cf       	rjmp	.-4      	; 0x60 <__SREG__+0x21>

        //* Lee el valor del ADC (10 bits combinando ADCH y ADCL)
        int ADC_Low = ADCL;                         // Lee primero ADCL (8 bits bajos)
  64:	24 b1       	in	r18, 0x04	; 4
        int ADC_Val = (ADCH << 8) | ADC_Low;        // Combina ADCH y ADCL en un valor de 10 bits
  66:	85 b1       	in	r24, 0x05	; 5
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	98 2f       	mov	r25, r24
  6c:	88 27       	eor	r24, r24
  6e:	82 2b       	or	r24, r18

        // Si el valor del ADC esta dentro del rango deseado, enciende el LED
        if (ADC_Val >= 410 && ADC_Val <= 820) {		// Prende si el valor del ADC es (2V, ~3V)
  70:	8a 59       	subi	r24, 0x9A	; 154
  72:	91 40       	sbci	r25, 0x01	; 1
  74:	8b 39       	cpi	r24, 0x9B	; 155
  76:	91 40       	sbci	r25, 0x01	; 1
  78:	20 f4       	brcc	.+8      	; 0x82 <__SREG__+0x43>
            PORTA |= (1 << PORTA2);                 // Enciende el LED
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	8b bb       	out	0x1b, r24	; 27
  80:	e6 cf       	rjmp	.-52     	; 0x4e <__SREG__+0xf>
        } else {
            PORTA &= ~(1 << PORTA2);                // Apaga el LED
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8b 7f       	andi	r24, 0xFB	; 251
  86:	8b bb       	out	0x1b, r24	; 27
  88:	e2 cf       	rjmp	.-60     	; 0x4e <__SREG__+0xf>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
